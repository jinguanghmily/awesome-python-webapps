#!/usr/bin/env python3
# -*- coding: utf-8 -*-

################################################
"""
*args：表示就是将实参中按照位置传值，多余的值都给args，且以元组的方式呈现
**kw：表示就是形参中按照关键字传值，多余的值都给kw，且以字典*的方式呈现
"""
def foo(x, *args, **kwargs):
    print(x)
    print(args)
    print(kwargs)
# 将1传给了x，将2,3,4以元组方式传给了args，y=1,a=2,b=3,c=4以字典的方式给了kwargs
foo(1, 2, 3, 4, y=1, a=2, b=3, c=4)
"""
the result is 
1
(2, 3, 4)
{'y': 1, 'c': 4, 'a': 2, 'b': 3}
"""
################################################
# class A(object):
#     bar = 1
#     def func1(self):
#         print('func_1 !!!')
#     @classmethod
#     def func2(cls):
#         print('func_2 !!!')
#         print(cls.bar)
#         cls().func1() #调用func1方法
# #A.func1(self=A)
# A.func2() #不需要


class A(object):
    # 属性默认为类属性（可以给直接被类本身调用）
    num = "类属性"

    # 实例化方法（必须实例化类之后才能被调用）
    def func1(self):  # self : 表示实例化类后的地址id
        print("func1")
        print(self)

    # 类方法（不需要实例化类就可以被类本身调用）
    @classmethod
    def func2(cls):  # cls : 表示没用被实例化的类本身
        print("func2")
        print(cls)
        print(cls.num)
        cls().func1()

    # 不传递传递默认self参数的方法（该方法也是可以直接被类调用的，但是这样做不标准）
    def func3():
        print("func3")
        print(A.num)  # 属性是可以直接用类本身调用的


# A.func1() 这样调用是会报错：因为func1()调用时需要默认传递实例化类后的地址id参数，如果不实例化类是无法调用的
#A.func2()
A.func3()


class Plugin(object):
    def __init__(self, api_interface):
        self._api = api_interface

    def callback(self, event_type, event_value):
        """
        Event callback
        """
        pass  # Do nothing


def load_plugins():
    api = create_api_interface()
    classes = load_plugin_classess()
    for c in classes:
        plugin = c(api)
        register_plugin(c, plugin)


################################################
################################################
################################################
################################################
################################################
################################################
################################################
################################################
################################################
################################################
################################################
################################################
################################################
################################################
################################################
################################################
################################################
################################################
################################################
################################################
################################################
################################################
################################################
################################################
################################################
################################################
################################################
################################################
################################################
################################################
################################################
################################################
################################################
################################################






